{"version":3,"sources":["store/meetingSlice.js","store/index.js","components/Fillerword.js","components/Speakerdetails.js","components/Addfillerword.js","components/Speaker.js","components/Speakergrid.js","components/Meeting.js","App.js","index.js"],"names":["meetingSlice","createSlice","name","initialState","club","meetingid","speakers","reducers","updateClubName","state","action","payload","updateMeetingnumber","addSpeaker","newItem","push","role","fillerwords","deleteSpeaker","splice","id","updateSpeakerName","updateSpeakerRole","addNewFillerword","filter","element","word","newFillerword","length","count","plusFillerwordcount","forEach","minusFillerwordcount","meetingActions","actions","store","configureStore","reducer","meeting","Fillerword","props","useSelector","speakerid","fillerword","dispatch","useDispatch","className","Stack","direction","Chip","icon","onClick","Badge","badgeContent","color","label","Speakerdetails","autofillnames","sort","spacing","alignItems","Button","endIcon","variant","Autocomplete","freeSolo","options","onInputChange","event","target","value","onChange","textContent","inputValue","renderInput","params","TextField","type","fullWidth","FormControl","InputLabel","Select","defaultValue","ListSubheader","MenuItem","Addfillerword","useState","setNewFillerword","size","onInput","Speaker","Divider","Grid","container","map","item","xs","Speakergrid","margin","speaker","index","Box","sx","boxShadow","p","width","Meeting","JSONtoReport","text","Date","toISOString","slice","fw","a","b","join","justifyContent","InputProps","readOnly","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","App","AppBar","Typography","Alert","severity","style","marginTop","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a49c4f80.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst meetingSlice = createSlice({\n  name: \"meeting\",\n  initialState: {\n    club: \"CDK Hyderabad Toastmasters\",\n    meetingid: 1,\n    speakers: [],\n  },\n  reducers: {\n    updateClubName(state, action) {\n      state.club = action.payload.name;\n    },\n\n    updateMeetingnumber(state, action) {\n      state.meetingid = action.payload.meetingid;\n    },\n\n    addSpeaker(state, action) {\n      const newItem = action.payload;\n\n      state.speakers.push({\n        name: newItem.name,\n        role: newItem.role,\n        fillerwords: newItem.fillerwords,\n      });\n    },\n    deleteSpeaker(state, action) {\n      state.speakers.splice(action.payload.id, 1);\n    },\n    updateSpeakerName(state, action) {\n      state.speakers[action.payload.id].name = action.payload.name;\n    },\n\n    updateSpeakerRole(state, action) {\n      state.speakers[action.payload.id].role = action.payload.role;\n    },\n\n    addNewFillerword(state, action) {\n      const existing = state.speakers[action.payload.id].fillerwords.filter(\n        (element) => element.word === action.payload.newFillerword\n      );\n\n      if (existing.length === 0) {\n        state.speakers[action.payload.id].fillerwords.push({\n          word: action.payload.newFillerword,\n          count: 0,\n        });\n      }\n    },\n\n    plusFillerwordcount(state, action) {\n      state.speakers[action.payload.id].fillerwords.forEach((element) => {\n        if (action.payload.word === element.word) {\n          element.count = element.count + 1;\n        }\n      });\n    },\n\n    minusFillerwordcount(state, action) {\n      state.speakers[action.payload.id].fillerwords.forEach((element) => {\n        if (action.payload.word === element.word) {\n          if (element.count > 0) {\n            element.count = element.count - 1;\n          }\n        }\n      });\n    },\n  },\n});\n\nexport const meetingActions = meetingSlice.actions;\n\nexport default meetingSlice;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport meetingSlice from \"./meetingSlice\";\n\nconst store = configureStore({\n  reducer: { meeting: meetingSlice.reducer },\n});\n\nexport default store;\n","import { useDispatch } from \"react-redux\";\nimport { meetingActions } from \"../store/meetingSlice\";\nimport { useSelector } from \"react-redux\";\nimport Badge from \"@mui/material/Badge\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport ArrowDownwardIcon from \"@mui/icons-material/ArrowDownward\";\nimport { Chip } from \"@mui/material\";\nimport { Stack } from \"@mui/material\";\n\nfunction Fillerword(props) {\n  const fillerwords = useSelector(\n    (state) => state.meeting.speakers[props.speakerid].fillerwords\n  );\n\n  const count = fillerwords.filter(\n    (fillerword) => fillerword.word === props.word\n  )[0].count;\n\n  const dispatch = useDispatch();\n\n  function plusHandler() {\n    dispatch(\n      meetingActions.plusFillerwordcount({\n        id: props.speakerid,\n        word: props.word,\n      })\n    );\n  }\n\n  function minusHandler() {\n    dispatch(\n      meetingActions.minusFillerwordcount({\n        id: props.speakerid,\n        word: props.word,\n      })\n    );\n  }\n\n  return (\n    <div className=\"fillerword\">\n      <Stack direction=\"row\">\n        <Chip icon={<ArrowDownwardIcon />} onClick={minusHandler}></Chip>\n        <Badge badgeContent={count} color=\"secondary\">\n          <Chip\n            icon={<ArrowUpwardIcon />}\n            onClick={plusHandler}\n            label={props.word}\n          ></Chip>\n        </Badge>\n      </Stack>\n    </div>\n  );\n}\n\nexport default Fillerword;\n","import { useDispatch } from \"react-redux\";\nimport { meetingActions } from \"../store/meetingSlice\";\nimport TextField from \"@mui/material/TextField\";\nimport { Stack } from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Select from \"@mui/material/Select\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nfunction Speakerdetails(props) {\n  const dispatch = useDispatch();\n\n  function nameChangeHandler(event) {\n    dispatch(\n      meetingActions.updateSpeakerName({\n        id: props.id,\n        name: event.target.value,\n      })\n    );\n  }\n\n  function nameChangeHandlerSelected(event) {\n    dispatch(\n      meetingActions.updateSpeakerName({\n        id: props.id,\n        name: event.target.textContent,\n      })\n    );\n  }\n\n  function roleChangeHandler(event) {\n    dispatch(\n      meetingActions.updateSpeakerRole({\n        id: props.id,\n        role: event.target.value,\n      })\n    );\n  }\n\n  function deleteSpeakerHandler() {\n    dispatch(\n      meetingActions.deleteSpeaker({\n        id: props.id,\n      })\n    );\n  }\n\n  const autofillnames = [\n    \"Satyanarayana Murty Munukutla\",\n    \"Rohith Kumar Rapolu\",\n    \"Ranjita Thakur\",\n    \"Chitra Yesodharan\",\n    \"Spandana Satpathy\",\n    \"Govind Krishna Somani\",\n    \"Radha Ponnekanti\",\n    \"Gopi Perumalla\",\n  ].sort();\n\n  return (\n    <div>\n      <Stack spacing={4}>\n        <Stack spacing={2} alignItems=\"flex-end\">\n          <div>\n            <Button\n              endIcon={<CloseIcon />}\n              variant=\"outlined\"\n              color=\"error\"\n              onClick={deleteSpeakerHandler}\n            ></Button>\n          </div>\n        </Stack>\n        <Stack spacing={2}>\n          <Autocomplete\n            freeSolo\n            options={autofillnames}\n            onInputChange={nameChangeHandler}\n            onChange={nameChangeHandlerSelected}\n            inputValue={props.name || \"\"}\n            renderInput={(params) => (\n              <TextField {...params} type=\"text\" label=\"Name\" fullWidth />\n            )}\n          />\n\n          <FormControl>\n            <InputLabel>Role</InputLabel>\n            <Select defaultValue=\"\" label=\"Role\" onChange={roleChangeHandler}>\n              <ListSubheader color=\"primary\">Role Payers</ListSubheader>\n              <MenuItem value={\"Sergeant at Arms (SAA)\"}>\n                Sergeant at Arms (SAA)\n              </MenuItem>\n              <MenuItem value={\"Timer\"}>Timer</MenuItem>\n              <MenuItem value={\"Grammarian\"}>Grammarian</MenuItem>\n              <MenuItem value={\"General Evaluator\"}>General Evaluator</MenuItem>\n              <MenuItem value={\"Toast Master of the Day (TMOD)\"}>\n                Toast Master of the Day (TMOD)\n              </MenuItem>\n              <MenuItem value={\"Table Topics Master (TTM)\"}>\n                Table Topics Master (TTM)\n              </MenuItem>\n\n              <ListSubheader color=\"primary\">Prepared Speeches</ListSubheader>\n              <MenuItem value={\"Speaker 1\"}>Speaker 1</MenuItem>\n              <MenuItem value={\"Speaker 2\"}>Speaker 2</MenuItem>\n              <MenuItem value={\"Speaker 3\"}>Speaker 3</MenuItem>\n\n              <ListSubheader color=\"primary\">\n                Prepared Speech Evaluations\n              </ListSubheader>\n              <MenuItem value={\"Evaluator 1\"}>Evaluator 1</MenuItem>\n              <MenuItem value={\"Evaluator 2\"}>Evaluator 2</MenuItem>\n              <MenuItem value={\"Evaluator 3\"}>Evaluator 3</MenuItem>\n\n              <ListSubheader color=\"primary\">\n                Table Topic Speakers\n              </ListSubheader>\n              <MenuItem value={\"Table Topic Speaker 1\"}>\n                Table Topic Speaker 1\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 2\"}>\n                Table Topic Speaker 2\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 3\"}>\n                Table Topic Speaker 3\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 4\"}>\n                Table Topic Speaker 4\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 5\"}>\n                Table Topic Speaker 5\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 6\"}>\n                Table Topic Speaker 6\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 7\"}>\n                Table Topic Speaker 7\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 8\"}>\n                Table Topic Speaker 8\n              </MenuItem>\n              <MenuItem value={\"Table Topic Speaker 9\"}>\n                Table Topic Speaker 9\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </Stack>\n      </Stack>\n    </div>\n  );\n}\n\nexport default Speakerdetails;\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { meetingActions } from \"../store/meetingSlice\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { Stack } from \"@mui/material\";\n\nfunction Addfillerword(props) {\n  const dispatch = useDispatch();\n\n  const [newFillerword, setNewFillerword] = useState(\"\");\n\n  function changeNewFillerwordHandler(event) {\n    setNewFillerword(event.target.value);\n  }\n\n  function addNewFillerwordHandler() {\n    if (newFillerword !== \"\") {\n      dispatch(\n        meetingActions.addNewFillerword({\n          id: props.speakerid,\n          newFillerword: newFillerword,\n        })\n      );\n      setNewFillerword(\"\");\n    }\n  }\n\n  return (\n    <div>\n      <Stack direction=\"row\">\n        <TextField\n          type=\"text\"\n          size=\"small\"\n          value={newFillerword}\n          onInput={changeNewFillerwordHandler}\n        />\n        <Button\n          size=\"small\"\n          variant=\"contained\"\n          onClick={addNewFillerwordHandler}\n        >\n          Add word\n        </Button>\n      </Stack>\n    </div>\n  );\n}\n\nexport default Addfillerword;\n","import Fillerword from \"./Fillerword\";\nimport Speakerdetails from \"./Speakerdetails\";\nimport Addfillerword from \"./Addfillerword\";\nimport Grid from \"@mui/material/Grid\";\nimport { Stack, Divider } from \"@mui/material\";\n\nfunction Speaker(props) {\n  return (\n    <Stack spacing={4}>\n      <Speakerdetails id={props.id} name={props.name} role={props.role} />\n      <Divider variant=\"middle\" />\n      <Grid container spacing={1}>\n        {props.fillerwords.map((fillerword) => (\n          <Grid item xs=\"auto\">\n            <Fillerword speakerid={props.id} word={fillerword.word} />\n          </Grid>\n        ))}\n      </Grid>\n      <Addfillerword speakerid={props.id} />\n    </Stack>\n  );\n}\n\nexport default Speaker;\n","import Speaker from \"./Speaker\";\n\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { meetingActions } from \"../store/meetingSlice\";\n\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\n\nfunction Speakergrid(props) {\n  const speakers = useSelector((state) => state.meeting.speakers);\n  const dispatch = useDispatch();\n\n  function addSpeakerHandler() {\n    dispatch(\n      meetingActions.addSpeaker({\n        name: \"\",\n        role: \"\",\n        fillerwords: [\n          {\n            word: \"Ah\",\n            count: 0,\n          },\n          {\n            word: \"Um\",\n            count: 0,\n          },\n          {\n            word: \"So\",\n            count: 0,\n          },\n          {\n            word: \"And\",\n            count: 0,\n          },\n          {\n            word: \"Like\",\n            count: 0,\n          },\n          {\n            word: \"You know\",\n            count: 0,\n          },\n          {\n            word: \"I mean\",\n            count: 0,\n          },\n        ],\n      })\n    );\n  }\n\n  return (\n    <Grid container spacing={3} margin={3}>\n      {speakers.map((speaker, index) => (\n        <Grid item>\n          <Box sx={{ boxShadow: 5, p: 3, width: 320 }}>\n            <Speaker\n              id={index}\n              name={speaker.name}\n              role={speaker.role}\n              fillerwords={speaker.fillerwords}\n            />\n          </Box>\n        </Grid>\n      ))}\n      <Grid item>\n        <Box sx={{ p: 3, width: 320 }}>\n          <Button size=\"large\" variant=\"outlined\" onClick={addSpeakerHandler}>\n            Add Speaker{\" \"}\n          </Button>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Speakergrid;\n","import { Stack } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { meetingActions } from \"../store/meetingSlice\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\n\nfunction Meeting(props) {\n  const meeting = useSelector((state) => state.meeting);\n  const dispatch = useDispatch();\n\n  function clubnameChangeHandler(event) {\n    dispatch(\n      meetingActions.updateClubName({\n        name: event.target.value,\n      })\n    );\n  }\n  function meetingnumberChangeHandler(event) {\n    dispatch(\n      meetingActions.updateMeetingnumber({\n        meetingid: event.target.value,\n      })\n    );\n  }\n\n  function JSONtoReport(meeting) {\n    var text;\n    text = \"Club: \" + meeting.club + \"\\n\";\n    text = text + \"Meeting ID: \" + meeting.meetingid + \"\\n\";\n    text = text + \"Date: \" + new Date().toISOString().slice(0, 10) + \"\\n\";\n    text = text + \"Speakers: \\n\";\n    text =\n      text +\n      meeting.speakers\n        .map(\n          (element) =>\n            \"\\n\\tName: \" +\n            element.name +\n            \"\\n\\tRole: \" +\n            element.role +\n            \"\\n\\tFiller words:\\n\" +\n            element.fillerwords\n              .filter((fw) => fw.count !== 0)\n              .sort((a, b) => b.count - a.count)\n              .map((fw) => \"\\t\\t\" + fw.word + \": \" + fw.count)\n              .join(\"\\n\")\n        )\n        .join(\"\\n\");\n\n    return text;\n  }\n\n  function downloadHandler() {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSONtoReport(meeting)], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"ahcounter_report.txt\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  return (\n    <Stack>\n      <Stack\n        spacing={4}\n        direction=\"row\"\n        margin={2}\n        justifyContent=\"space-between\"\n      >\n        <TextField\n          type=\"text\"\n          label=\"Club Name\"\n          InputProps={{\n            readOnly: true,\n          }}\n          fullWidth\n          value={meeting.club}\n          onChange={clubnameChangeHandler}\n        />\n        <TextField\n          type=\"text\"\n          label=\"Meeting ID\"\n          value={meeting.meetingid}\n          onChange={meetingnumberChangeHandler}\n        />\n\n        <Button\n          variant=\"contained\"\n          endIcon={<FileDownloadIcon />}\n          onClick={downloadHandler}\n        >\n          Download\n        </Button>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport default Meeting;\n","import Speakergrid from \"./components/Speakergrid\";\nimport Meeting from \"./components/Meeting\";\nimport { Alert, AppBar, Typography } from \"@mui/material\";\n\nfunction App() {\n  return (\n    <div>\n      <AppBar>\n        <Typography variant=\"h3\">\n          &nbsp; Toastmasters <i>Ah!</i> Counter\n        </Typography>\n        <Alert severity=\"warning\">\n          Refreshing this page will lose the data entered!!! Download if you\n          need to save it\n        </Alert>\n      </AppBar>\n      <div style={{ marginTop: 150 }}>\n        <Meeting />\n        <Speakergrid />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/index';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}